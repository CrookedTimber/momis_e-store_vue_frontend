{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-search\"\n};\nconst _hoisted_2 = {\n  class: \"columns is-multiline\"\n};\nconst _hoisted_3 = {\n  class: \"column is-12\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"title\"\n}, \"Search\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"is-size-5 has-text-grey\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ProductBox = _resolveComponent(\"ProductBox\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"h2\", _hoisted_5, \"Search term:\\\"\" + _toDisplayString($data.query) + \"\\\"\", 1 /* TEXT */)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createBlock(_component_ProductBox, {\n      key: product.id,\n      product: product\n    }, null, 8 /* PROPS */, [\"product\"]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAsB;;EAC1BA,KAAK,EAAC;AAAc;gCACvBC,oBAA6B;EAAzBD,KAAK,EAAC;AAAO,GAAC,QAAM;;EACpBA,KAAK,EAAC;AAAyB;;;uBAJzCE,oBAaM,OAbNC,UAaM,GAZJF,oBAWM,OAXNG,UAWM,GAVJH,oBAGM,OAHNI,UAGM,GAFJC,UAA6B,EAC7BL,oBAAkE,MAAlEM,UAAkE,EAA9B,gBAAa,oBAAGC,WAAK,IAAG,IAAC,sCAG/DN,oBAIEO,6BAHkBD,cAAQ,EAAnBE,OAAO;yBADhBC,aAIEC;MAFOC,GAAG,EAAEH,OAAO,CAACI,EAAE;MACfJ,OAAO,EAAEA","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","$data","_Fragment","product","_createBlock","_component_ProductBox","key","id"],"sourceRoot":"","sources":["C:\\Edgar\\Web Development\\00_job_seeking\\portfolio\\E-Commerce\\momis_vue_eshop\\src\\views\\SearchView.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-search\">\r\n    <div class=\"columns is-multiline\">\r\n      <div class=\"column is-12\">\r\n        <h1 class=\"title\">Search</h1>\r\n        <h2 class=\"is-size-5 has-text-grey\">Search term:\"{{ query }}\"</h2>\r\n      </div>\r\n\r\n      <ProductBox\r\n        v-for=\"product in products\"\r\n        v-bind:key=\"product.id\"\r\n        v-bind:product=\"product\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { toast } from 'bulma-toast';\r\nimport ProductBox from '@/components/ProductBox.vue';\r\nexport default {\r\n  name: 'Search',\r\n  data() {\r\n    return {\r\n      products: [],\r\n      query: '',\r\n    };\r\n  },\r\n  mounted() {\r\n\r\n    document.title = `Search | Momis`;\r\n    let uri = window.location.search.substring()\r\n  },\r\n  methods: {\r\n    async getProduct() {\r\n      this.$store.commit('setIsLoading', true);\r\n      const category_slug = this.$route.params.category_slug;\r\n      const product_slug = this.$route.params.product_slug;\r\n\r\n      await axios\r\n        .get(`/api/v1/products/${category_slug}/${product_slug}`)\r\n        .then((response) => {\r\n          this.product = response.data;\r\n          document.title = `${this.product.name} | Momis`;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      this.$store.commit('setIsLoading', false);\r\n    },\r\n    addToCart() {\r\n      if (isNaN(this.quantity) || this.quantity < 1) {\r\n        this.quantity = 1;\r\n      }\r\n      const item = {\r\n        product: this.product,\r\n        quantity: this.quantity,\r\n      };\r\n\r\n      this.$store.commit('addToCart', item);\r\n\r\n      toast({\r\n        message: 'Product added to the cart',\r\n        type: 'is-success',\r\n        dismissible: true,\r\n        pauseOnHover: true,\r\n        duration: 2000,\r\n        position: 'bottom-right',\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}